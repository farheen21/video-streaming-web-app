package com.webapp.application.videostreamingwebapp.service;import com.webapp.application.videostreamingwebapp.dto.UploadVideoResponse;import com.webapp.application.videostreamingwebapp.dto.VideoDto;import com.webapp.application.videostreamingwebapp.model.Video;import com.webapp.application.videostreamingwebapp.repository.VideoRepository;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.util.List;@Service@RequiredArgsConstructorpublic class VideoService {    private final S3Service s3Service;    private final VideoRepository videoRepository;    public UploadVideoResponse uploadVideo(MultipartFile multipartFile) {        String videoUrl = s3Service.uploadFile(multipartFile);        var video = new Video();        video.setVideoUrl(videoUrl);        var savedVideo = videoRepository.save(video);        return new UploadVideoResponse(savedVideo.getId(), savedVideo.getVideoUrl());    }    public VideoDto editVideo(VideoDto videoDto) {        // Find the video by VideoId          var savedVideo = getVideoById(videoDto.getId());        // Map the videoDTO feilds to video           savedVideo.setTitle(videoDto.getTitle());           savedVideo.setDescription(videoDto.getDescription());           savedVideo.setTags(videoDto.getTags());           savedVideo.setVideoUrl(videoDto.getVideoUrl());           savedVideo.setVideoStatus(videoDto.getVideoStatus());           savedVideo.setThumbnailUrl(videoDto.getThumbnailUrl());        // save the video to DB        videoRepository.save(savedVideo);        return videoDto;    }    public String uploadThumbnail(MultipartFile file, String videoId) {        var savedVideo = getVideoById(videoId);        String thumbnailUrl = s3Service.uploadFile(file);        savedVideo.setThumbnailUrl(thumbnailUrl);        videoRepository.save(savedVideo);        return thumbnailUrl;    }    Video getVideoById(String videoId){        return videoRepository.findById(videoId).orElseThrow(() ->                new IllegalArgumentException("Cannot find video by id - "                        + videoId));    }    public VideoDto getVideoDetails(String videoId) {        Video savedVideo = getVideoById(videoId);        VideoDto videoDto = new VideoDto();        videoDto.setVideoUrl(savedVideo.getVideoUrl());        videoDto.setThumbnailUrl(savedVideo.getThumbnailUrl());        videoDto.setDescription(savedVideo.getDescription());        videoDto.setVideoStatus(savedVideo.getVideoStatus());        videoDto.setId(savedVideo.getId());        videoDto.setTitle(savedVideo.getTitle());        videoDto.setTags(savedVideo.getTags());        return videoDto;    }    public List<Video> getAllVideos() {        return videoRepository.findAll();    }//    public VideoDto likedVideo(String videoId) {//        Video videoById = getVideoById(videoId);//    }}